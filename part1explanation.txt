For Part 1, the goal is to create the uid_crack file.
In order to achieve this, we must rewrite the return address in the test stack frame to point to the log_result function, simulating a buffer overflow.

Looking at the stack allocation, we know that the return address will be 4 bytes away from the $ebp ($eip backup is at address $ebp+4).
We also know that since there is no ASLR, all the addresses will be the same on every run.
We simply have to find the offset between the space allocated for the test variable and the $eip backup, then write the return address to the offset.
We can use GDB to print the addresses we need:
    log_result function: 0x08048668.
    test variable: 0xffffc4c3
    $ebp: 0xffffc4e8
        $eip backup can be deduced to be $ebp + 4, so address to overwrite is at: 0xffffc4ec
Offset between test and $eip backup: 0xffffc4ec - 0xffffc4c3 = 41 (in decimal)
    We then write 4 bytes for each byte of the return address starting from test[41] to test[44].

(Extra credit) To ensure that the program exits properly without crashing, we need to properly return to main at the end of log_result.
The crash happens because when we overwrite the return address, we have no way of getting back to where we originally came from (main).
The return address is always pushed onto the stack right before a function call.
So, we need to somehow push the return address we originally overwrote onto the stack underneath the return address we overwrote before we "return" to log_result.
To do this, we can overwrite the parameter variable "input" with the return address we overwrote (0x08048760), since the value of the parameter lies right below the return address we overwrote.
Since parameters are stored below the return addresses, we can just treat that parameter as the return address to our false function call.